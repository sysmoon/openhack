### 03.challenge version 2 for aks cluster with acr integration
### make namespace and aks cluster before role binding and ingress integragion.
### az login
az login -u hacker1c4u@OTAPRD1409ops.onmicrosoft.com

### select subscription
az account list --all
az account set --subscription "your subscription id"
az account show

# Set alias exist resources
ACRNAME=registrybnt1510
TEAMRGNAME=teamResources

# Set Resource Group Name using the unique suffix
RGNAME="aks-rg-sktopenhack"

# Set Region (Location)
LOCATION=eastasia
# for Networking with teamResources group on eastasis region.

# Create Resource Group
az group create -n $RGNAME -l $LOCATION

### create AKS cluster
# Set AKS Cluster Name
CLUSTERNAME=akssktopenhack3-ver2

### get availalble k8s version
az aks get-versions -l $LOCATION -o table

# set k8s version
K8SVERSION=1.16.9

# check vm size in location
az vm list-skus --location $LOCATION --output table

### Integrate Azure Active Directory with Azure Kubernetes Service
# Create the Azure AD application
serverApplicationId=$(az ad app create \
    --display-name "${CLUSTERNAME}Server" \
    --identifier-uris "https://${CLUSTERNAME}Server" \
    --query appId -o tsv)
# Update the application group membership claims
az ad app update --id $serverApplicationId --set groupMembershipClaims=All
# Create a service principal for the Azure AD application
az ad sp create --id $serverApplicationId
# Get the service principal secret
serverApplicationSecret=$(az ad sp credential reset \
    --name $serverApplicationId \
    --credential-description "AKSPassword" \
    --query password -o tsv)
# Assign permision
az ad app permission add \
    --id $serverApplicationId \
    --api 00000003-0000-0000-c000-000000000000 \
    --api-permissions e1fe6dd8-ba31-4d61-89e7-88639da4683d=Scope 06da0dbc-49e2-44d2-8312-53f166ab848a=Scope 7ab1d382-f21e-4acd-a863-ba3e13f7da61=Role
# Grant the permissions assigned in the previous step for the server application
az ad app permission grant --id $serverApplicationId --api 00000003-0000-0000-c000-000000000000
az ad app permission admin-consent --id $serverApplicationId

# Create Azure AD client component
clientApplicationId=$(az ad app create \
    --display-name "${CLUSTERNAME}Client" \
    --native-app \
    --reply-urls "https://${CLUSTERNAME}Client" \
    --query appId -o tsv)
# Create a service principal for the client application
az ad sp create --id $clientApplicationId
# Get the oAuth2 ID for the server app
oAuthPermissionId=$(az ad app show --id $serverApplicationId --query "oauth2Permissions[0].id" -o tsv)
# Add the permissions for the client application and server application components to use the oAuth2 communication flow
az ad app permission add --id $clientApplicationId --api $serverApplicationId --api-permissions ${oAuthPermissionId}=Scope
az ad app permission grant --id $clientApplicationId --api $serverApplicationId
### End of Integration AAD with AKS

# Load and aliasing tenant Id.
tenantId=$(az account show --query tenantId -o tsv)

#### Load and aliasing subnet id for VNet.
subnetid=$(az network vnet subnet list --resource-group teamResources --vnet-name vnet --query "[0].id" --output tsv)

# Set node size
NODE_SIZE=Standard_B8ms
# create aks cluster
# Added --attach-acr for no creating secret later.
az aks create -n $CLUSTERNAME -g $RGNAME --attach-acr $ACRNAME \
    --kubernetes-version $K8SVERSION \
    --network-plugin azure \
    --vnet-subnet-id $subnetid \
    --generate-ssh-keys -l $LOCATION \
    --node-count 3 \
    --node-vm-size $NODE_SIZE \
    --enable-addons monitoring \
    --aad-server-app-id $serverApplicationId \
    --aad-server-app-secret $serverApplicationSecret \
    --aad-client-app-id $clientApplicationId \
    --aad-tenant-id $tenantId \
    --no-wait

### Integrate an existing ACR with existing AKS clusters.
# az aks update -n myAKSCluster -g myResourceGroup --attach-acr <acrName>
### Remove the integration
# az aks update -n myAKSCluster -g myResourceGroup --detach-acr <acrName>

# get aks cluster status
az aks list -o table

# Get the Kubernetes config files for your new AKS cluster
az aks get-credentials -n $CLUSTERNAME -g $RGNAME --admin --overwrite-existing

# Verify you have API access to your new AKS cluster
kubectl get nodes

# cluster info
kubectl cluster-info

# # ACR login
# docker login -u registrybnt1510 registrybnt1510.azurecr.io

### create namespace for web-dev, api-dev
kubectl apply -f create-namespace.yaml

### deploy each component using deployemnt yaml file
# userprofile
kubectl apply -f ./services/openhack.userprofile.deployment.yaml
# user-java
kubectl apply -f ./services/openhack.user-java.deployment.yaml
# trips
kubectl apply -f ./services/openhack.trips.deployment.yaml
# poi
kubectl apply -f ./services/openhack.poi.deployment.yaml
# tripviewer
kubectl apply -f ./services/openhack.tripviewer.deployment.yaml

### open browser and check tripviewer whether working well.
kubectl get svc
